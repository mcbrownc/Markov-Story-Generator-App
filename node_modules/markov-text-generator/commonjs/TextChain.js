"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _NGram = _interopRequireDefault(require("./NGram.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TextChain = /*#__PURE__*/function () {
  function TextChain(nGramStates, order, options) {
    _classCallCheck(this, TextChain);

    this._nGramStates = nGramStates;
    this._startAsSentence = options.startAsSentence;
    this._endAsSentence = options.endAsSentence;
    this._order = order;
  }

  _createClass(TextChain, [{
    key: "generate",
    value: function generate(numWords) {
      var initialNGram = this._getInitialNGram();

      var str = "".concat(initialNGram, " ");
      var i = 0;
      var count = 0;
      var currState = new _NGram["default"](initialNGram.split(" "), 0, this._order);

      while (i < numWords - this._order) {
        var nextStates = this._nGramStates.get(currState.wordsToString);

        if (!nextStates || nextStates.length == 0) {
          break;
        }

        var index = this._getRandomInt(nextStates.length);

        var nextState = nextStates[index]; // If at final state, and must end with punctuation

        if (this._endAsSentence && i === numWords - (this._order + 1)) {
          if (count >= 20) {
            console.log("Reached maximum extra words allowed to end text with punctuation, so added full stop to final attempt.");
            str += "".concat(nextState, ".");
            break;
          }

          if (!this._wordEndsSentence(nextState)) {
            // If random final word doesn't end in punctuation,
            // then iterate through each possible state to find word that does
            var finalWordFound = false;

            var _iterator = _createForOfIteratorHelper(nextStates),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var word = _step.value;

                if (this._wordEndsSentence(word)) {
                  finalWordFound = true;
                  str += word;
                  break;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (finalWordFound) {
              break;
            }

            if (!finalWordFound) {
              // Nothing found then add word and continue to next round
              str += "".concat(nextState, " ");
              currState = currState.shiftAdd(nextState);
              count++;
              continue;
            }
          }
        }

        str += "".concat(nextState, " ");
        currState = currState.shiftAdd(nextState);
        i++;
      }

      return str.trim();
    }
  }, {
    key: "_nGramBeginsSentence",
    value: function _nGramBeginsSentence(nGramKey) {
      var firstChar = nGramKey.substring(0, 1);
      var lastChar = nGramKey.substring(nGramKey.length - 1, nGramKey.length);
      var regexUpper = /[A-Z]/;
      var regexPunctuation = /[!-.:-@[-`{-~‘-”]/;

      if (!firstChar.match(regexUpper) || lastChar.match(regexPunctuation)) {
        return false;
      }

      return true;
    }
  }, {
    key: "_wordEndsSentence",
    value: function _wordEndsSentence(word) {
      var lastChar = word.substring(word.length - 1, word.length);

      if (["!", "?"].includes(lastChar)) {
        return true;
      } // Check not acronym ie. more than one period


      if (lastChar === "." && word.indexOf(".") === word.lastIndexOf(".")) {
        return true;
      }

      return false;
    }
  }, {
    key: "_getRandomInt",
    value: function _getRandomInt(max) {
      return Math.floor(Math.random() * Math.floor(max));
    }
  }, {
    key: "_getInitialNGram",
    value: function _getInitialNGram() {
      var nGramKey;
      var index;
      var count = 0;
      var keys = Array.from(this._nGramStates.keys());

      while (true) {
        index = this._getRandomInt(this._nGramStates.size);
        nGramKey = keys[index];

        if (!this._startAsSentence) {
          break;
        }

        if (this._nGramBeginsSentence(nGramKey)) {
          break;
        }

        if (count >= 1000) {
          throw new Error("Checked 1000 words and cannot find a word that starts a sentence.");
        }

        count++;
      }

      return nGramKey;
    }
  }]);

  return TextChain;
}();

var _default = TextChain;
exports["default"] = _default;