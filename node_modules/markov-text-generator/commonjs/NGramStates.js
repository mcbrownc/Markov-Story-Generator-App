"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.indexOfNgram = exports.getFollowingWords = void 0;

var _NGram = _interopRequireDefault(require("./NGram.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NGramStates = /*#__PURE__*/function () {
  function NGramStates(sourceText, order, options) {
    _classCallCheck(this, NGramStates);

    var wordsArray = sourceText.split(/\s+/g).filter(options.filterFunction);
    this._textmap = this.buildStates(wordsArray, order);
  }

  _createClass(NGramStates, [{
    key: "getNGramStates",
    value: function getNGramStates() {
      return this._textmap;
    }
  }, {
    key: "buildStates",
    value: function buildStates(wordsArray, order) {
      var textMap = new Map(); // Iterate through words array and create new nGram of n words for each index

      for (var i = 0; i < wordsArray.length - (order - 1); i++) {
        var nGram = new _NGram["default"](wordsArray.slice(i, i + order));
        var wordsKey = nGram.wordsToString; // If Map does not contain this ngram word sequence as a key yet,
        // then find all words that follow this word sequence in source text, and set this word array as the value

        if (!textMap.has(wordsKey)) {
          textMap.set(wordsKey, getFollowingWords(wordsArray, nGram, i));
        }
      }

      return textMap;
    }
  }]);

  return NGramStates;
}();

var getFollowingWords = function getFollowingWords(wordsArray, nGram) {
  var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var nGramLength = nGram.length;
  var words = [];

  while (start < wordsArray.length - nGramLength) {
    var index = indexOfNgram(wordsArray, nGram, start);

    if (index != -1) {
      words.push(wordsArray[index + nGramLength]);
      start = index + nGramLength;
    } else {
      start++;
    }
  }

  return words;
};

exports.getFollowingWords = getFollowingWords;

var indexOfNgram = function indexOfNgram(wordsArray, nGram) {
  var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var index = wordsArray.indexOf(nGram.wordAt(0), start); // If word not found, or index is too close to end of words array to allow nGram to exist in this position

  if (index === -1 || index >= wordsArray.length - nGram.length) {
    return -1;
  } // Compare word sequence found in this position to nGram word sequence


  var slice = wordsArray.slice(index, index + nGram.length);

  if (slice.join(" ") === nGram.wordsToString) {
    return index;
  } // No match


  return -1;
};

exports.indexOfNgram = indexOfNgram;
var _default = NGramStates;
exports["default"] = _default;